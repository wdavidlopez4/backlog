// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backlog.Infrastructure.BacklogContext;

namespace backlog.Infrastructure.Migrations
{
    [DbContext(typeof(BacklogContextSqlServer))]
    partial class BacklogContextSqlServerModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("backlog.Domain.Entities.Epic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SprintId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SprintId");

                    b.ToTable("Epics");
                });

            modelBuilder.Entity("backlog.Domain.Entities.Feature", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EpicId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Historial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EpicId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("backlog.Domain.Entities.Job", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Asignacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Colaboradores")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("backlog.Domain.Entities.Sprint", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Desde")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hasta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("backlog.Domain.Entities.Epic", b =>
                {
                    b.HasOne("backlog.Domain.Entities.Sprint", "Sprint")
                        .WithMany("Epics")
                        .HasForeignKey("SprintId");
                });

            modelBuilder.Entity("backlog.Domain.Entities.Feature", b =>
                {
                    b.HasOne("backlog.Domain.Entities.Epic", "Epic")
                        .WithMany("Features")
                        .HasForeignKey("EpicId");
                });

            modelBuilder.Entity("backlog.Domain.Entities.Job", b =>
                {
                    b.HasOne("backlog.Domain.Entities.Feature", "Feature")
                        .WithMany("Jobs")
                        .HasForeignKey("FeatureId");
                });
#pragma warning restore 612, 618
        }
    }
}
